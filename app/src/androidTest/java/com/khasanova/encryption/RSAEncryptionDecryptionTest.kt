package com.khasanova.encryption

import org.junit.Test
import kotlin.test.assertEquals

class RSAEncryptionDecryptionTest {

    private val rsaEncryption: RsaEncryptionModule = RsaEncryptionModule()

    @Test
    fun confirmEncryptionWithDecryptionLetters() {
        val phraseExample = "TestPhrase"

        val encryptedPhrase = rsaEncryption.getEncryptedPhrase(publicKey, phraseExample).orEmpty()
        val decryptedPhrase = rsaEncryption.getDecryptedPhrase(privateKey, encryptedPhrase)

        assertEquals(phraseExample, decryptedPhrase)
    }

    @Test
    fun confirmEncryptionWithDecryptionNumbers() {
        val phraseExample = "9037746"

        val encryptedPhrase = rsaEncryption.getEncryptedPhrase(publicKey, phraseExample).orEmpty()
        val decryptedPhrase = rsaEncryption.getDecryptedPhrase(privateKey, encryptedPhrase)

        assertEquals(phraseExample, decryptedPhrase)
    }

    @Test
    fun confirmEncryptionWithDecryption() {
        val phraseExample = "Test 6150 yJ67kGs"

        val encryptedPhrase = rsaEncryption.getEncryptedPhrase(publicKey, phraseExample).orEmpty()
        val decryptedPhrase = rsaEncryption.getDecryptedPhrase(privateKey, encryptedPhrase)

        assertEquals(phraseExample, decryptedPhrase)
    }

    private val publicKey = "MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEApNeX4bvyLKM7FbrGCzOkn7EbxaYIvtra8m2oXj79tr3U+3odPdHEPpmFpPcfmgxeZUWT6UvlOCXQbVulocazhL/NEIEE7RC/2rURIjnIi0w6Lne8JqxytFrQThJIAbjq+TJiv60l/JBuUd0/AjNtQZMbDVMKnw/FgmqlpMmGQba2Jsgg/IKgcOrZjpyankJNzt+EtQm3W1c6R7f6O8QKz0rU+5uYw3dQJlw3kS3N5IUOtjQ6V9wHcAWDdb00PWjG4mtSp1wWcqgtW8ThBj4PXboNSsRJuAp47FlKd8vBU7j4Gh0P07Z8R6S42nU02upBMT4g2JsrjuMIsivQiPUcvHEg/QuKE9lK3NsXZMD333Tu3ilytCYZFCQM8ZyWiuuR9IoFZdHy2uAyT6jEWWW9xq1WfdXeYQSMv+Ly6OJ7lc1VJwGTRt8lRImeEO9fbMtHQJmpOxZIB5DuGBLPkhBcyZ8cj8P9V4mXsIOPFaAtBo1ftmdphYzIIhL/6//JnB3vQPmHwzbpL7SdZ5wOluUFB1G8hTO4ncgi1rcsmgBWTQRPLBYskk4sy6t9cvnhy9jdKHbrwXJzl1T79UhiwVfrvS0WFUNaRNvDCHFzEjBGYptxF8LI7DpBG1CIXG6zJyva5f6GS5MptbQ55A7+ykUkyfhUzpaXF8sb+egN9PKJMikCAwEAAQ=="

    private val privateKey = "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"
}